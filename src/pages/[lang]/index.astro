---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getLangFromUrl } from '../../i18n/utils.ts';
import { supportedLanguages, dateFormatOptions, type SupportedLanguage } from '../../i18n/config';
import BlogPostsGrid from '../../components/BlogPostsGrid.astro';

// Obtener el idioma actual de la URL
const lang = getLangFromUrl(Astro.url) as SupportedLanguage;

// Importar traducciones
const translations = lang === 'es' 
  ? await import('../../i18n/translations/es.json')
  : await import('../../i18n/translations/en.json');

function t(key: string): string {
  return (translations.default as Record<string, string>)[key] || key;
}

// Filtrar posts para el idioma actual
const allBlogPosts = await getCollection('blog', ({ data, slug }) => {
  // No mostrar borradores
  if (data.draft) return false;
  
  // Si el slug comienza con el idioma actual
  if (slug.startsWith(`${lang}/`)) return true;
  
  // Para español (default), incluir posts que no tienen prefijo de idioma
  if (!slug.startsWith('en/') && !slug.startsWith('es/') && lang === 'es') return true;
  
  return false;
});

// Posts populares para el sidebar (podrías tener una lógica diferente para determinar popularidad)
const popularPosts = allBlogPosts.slice(0, 5);

// Función para preparar el slug (remover prefijo de idioma si existe)
function prepareSlug(slug: string): string {
  if (slug.startsWith('en/') || slug.startsWith('es/')) {
    return slug.substring(3); // Eliminar el prefijo de idioma
  }
  return slug;
}

// Obtener posts destacados si existen
const featuredPosts = allBlogPosts.filter(post => post.data.featured);
// Si no hay posts destacados, usar los más recientes
const popularPostsForSidebar = featuredPosts.length > 0 ? featuredPosts : allBlogPosts.slice(0, 3);

// Add title letters for blur effect
const titleText = "DOF-RAG";
const titleLetters = Array.from(titleText);

// Add subtitle words for blur effect (slightly faster)
const subtitleText = t('home.subtitle');
const subtitleWords = subtitleText.split(" ");

// Definir los parámetros estáticos para la generación
export function getStaticPaths() {
  return supportedLanguages.map(lang => ({
    params: { lang }
  }));
}
---

<Layout title={t('home.title')}>
  <section class="text-center py-16 md:py-24">
    <h1 class="text-5xl md:text-7xl font-bold mb-6">
      {titleLetters.map((letter, index) => (
        <span class="gradient-text title-letter" style={`--delay: ${index * 0.1}s`}>
          {letter}
        </span>
      ))}
    </h1>
    <p class="text-xl md:text-2xl max-w-3xl mx-auto text-[var(--color-muted)]">
      {subtitleWords.map((word, index) => (
        <span class="subtitle-word" style={`--delay: ${index * 0.05}s`}>
          {word}
        </span>
      ))}
    </p>
  </section>

  <div class="grid grid-cols-12 gap-8">
    <!-- Sidebar con posts populares -->
    <div class="col-span-12 md:col-span-3">
      <div class="sticky top-24">
        <h2 class="text-xl font-bold mb-6 pb-2 border-b border-[var(--color-border)]">{t('home.popular_posts')}</h2>
        <ul class="space-y-4">
          {popularPostsForSidebar.map(post => (
            <li>
              <a href={`${import.meta.env.BASE_URL}/${lang}/blog/${prepareSlug(post.slug)}`} class="hover:text-[var(--color-accent)]">{post.data.title}</a>
            </li>
          ))}
        </ul>

        <div class="mt-12">
          <h2 class="text-xl font-bold mb-4 pb-2 border-b border-[var(--color-border)]">{t('home.subscribe')}</h2>
          <p class="text-[var(--color-muted)] mb-4">{t('home.stay_updated')}</p>
          <a href={`${import.meta.env.BASE_URL}/rss.xml`} class="inline-block gradient-border px-4 py-2 text-sm font-medium rounded-md hover:opacity-90 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
              <path d="M6.503 20.752c0 1.794-1.456 3.248-3.251 3.248-1.796 0-3.252-1.454-3.252-3.248 0-1.794 1.456-3.248 3.252-3.248 1.795.001 3.251 1.454 3.251 3.248zm-6.503-12.572v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817c-.062-8.71-7.118-15.758-15.839-15.82zm0-3.368c10.58.046 19.152 8.594 19.183 19.188h4.817c-.03-13.231-10.755-23.954-24-24v4.812z"/>
            </svg>
            <span class="gradient-text">RSS</span>
          </a>
        </div>
      </div>
    </div>

    <!-- Main content -->
    <div class="col-span-12 md:col-span-9">
      <h2 class="text-3xl font-bold mb-8">
        <span class="gradient-text">{t('home.recent_posts')}</span>
      </h2>
      
      <!-- Componente de grilla de posts con paginación -->
      <BlogPostsGrid 
        posts={allBlogPosts} 
        lang={lang} 
        baseUrl={import.meta.env.BASE_URL}
        translations={{
          readMore: t('home.read_more'),
          loadMore: t('home.load_more'),
          noMorePosts: t('home.no_more_posts'),
          unknownAuthor: t('common.unknown_author'),
          noDescription: t('common.no_description')
        }}
      />
    </div>
  </div>
</Layout> 