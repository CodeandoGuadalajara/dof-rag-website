---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { getLangFromUrl } from '../../../i18n/utils.ts';
import { supportedLanguages, type SupportedLanguage } from '../../../i18n/config.ts';

// Tell Astro to prerender this page at build time
export const prerender = true;

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });
  
  // Extract all unique tags and filter out empty strings
  const uniqueTags = [...new Set(
    allPosts.flatMap(post => 
      // Filter out empty strings and null/undefined values
      (post.data.tags || []).filter(tag => tag && tag.trim().length > 0)
    )
  )];
  
  // Crear rutas para cada combinación de idioma y etiqueta
  const paths = [];
  
  for (const lang of supportedLanguages) {
    // Filtrar posts para este idioma
    const langPosts = allPosts.filter(post => {
      if (post.slug.startsWith(`${lang}/`)) return true;
      if (!post.slug.startsWith('en/') && !post.slug.startsWith('es/') && lang === 'es') return true;
      return false;
    });
    
    // Crear rutas para cada etiqueta con los posts filtrados por idioma
    for (const tag of uniqueTags) {
      // Filtrar posts que tienen esta etiqueta
      const tagPosts = langPosts.filter(post => 
        post.data.tags && post.data.tags.includes(tag)
      );
      
      // Solo crear ruta si hay al menos un post con esta etiqueta en este idioma
      if (tagPosts.length > 0) {
        paths.push({
          params: { lang, tag },
          props: { 
            tag,
            posts: tagPosts.sort((a, b) => 
              b.data.date.getTime() - a.data.date.getTime()
            )
          }
        });
      }
    }
  }
  
  return paths;
}

const { tag, posts = [] } = Astro.props;
const lang = getLangFromUrl(Astro.url) as SupportedLanguage;

// Importar traducciones
const translations = lang === 'es' 
  ? await import('../../../i18n/translations/es.json')
  : await import('../../../i18n/translations/en.json');

function t(key: string): string {
  return (translations.default as Record<string, string>)[key] || key;
}

// Función para formatear la fecha de manera segura
function formatDate(dateObj: Date): string {
  try {
    return dateObj.toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (error) {
    console.error(`Error al formatear la fecha:`, error);
    return t('common.date_not_available');
  }
}

// Función para preparar el slug (remover prefijo de idioma si existe)
function prepareSlug(slug: string): string {
  if (slug.startsWith('en/') || slug.startsWith('es/')) {
    return slug.substring(3); // Eliminar el prefijo de idioma
  }
  return slug;
}
---

<Layout title={`${lang === 'es' ? 'Posts etiquetados con' : 'Posts tagged with'} #${tag} | DOF-RAG Blog`}>
  <div class="container mx-auto px-4 py-12">
    <header class="mb-12 text-center">
      <h1 class="text-4xl font-bold mb-4">
        <span class="gradient-text">#{tag}</span>
      </h1>
      <p class="text-lg text-[var(--color-muted)]">
        {posts.length} {posts.length === 1 
          ? t('tags.post_singular')
          : t('tags.post_plural')} 
        {t('tags.with_tag')}
      </p>
    </header>

    <div class="grid grid-cols-1 gap-10">
      {posts.map(post => {
        // Usar la función para preparar el slug sin tener el código duplicado
        const postSlug = prepareSlug(post.slug);
        
        return (
          <article class="blog-card bg-[var(--color-card)] rounded-xl overflow-hidden transition-transform hover:scale-[1.01] hover:shadow-md border border-[var(--color-border)]">
            <div class="flex flex-col md:flex-row">
              {post.data.image ? (
                <div class="md:w-1/3 relative">
                  <a href={`${import.meta.env.BASE_URL}/${lang}/blog/${postSlug}`} class="block w-full h-full overflow-hidden">
                    <Image 
                      src={`${import.meta.env.BASE_URL}/${(post.data.image || '').startsWith('/') ? (post.data.image || '').substring(1) : (post.data.image || '')}`} 
                      alt={`${lang === 'es' ? 'Imagen para' : 'Image for'} ${post.data.title}`}
                      class="w-full h-48 md:h-full object-cover transition-transform hover:scale-[1.05]"
                      width={800}
                      height={450}
                      loading="lazy"
                    />
                    <div class="absolute inset-0 bg-gradient-to-r from-black/30 to-transparent opacity-0 hover:opacity-100 transition-opacity"></div>
                  </a>
                </div>
              ) : null}
              
              <div class={`p-6 flex flex-col justify-between ${post.data.image ? 'md:w-2/3' : 'w-full'}`}>
                <div>
                  <time datetime={post.data.date.toISOString()} class="text-sm text-[var(--color-muted)] block mb-3">
                    {formatDate(post.data.date)}
                  </time>
                  <h3 class="text-2xl font-bold mb-3 line-clamp-2">
                    <a href={`${import.meta.env.BASE_URL}/${lang}/blog/${postSlug}`} class="hover:text-[var(--color-accent)] transition-colors">
                      {post.data.title}
                    </a>
                  </h3>
                  <p class="text-[var(--color-muted)] mb-4 line-clamp-3">
                    {post.data.description || t('tags.no_description')}
                  </p>
                  
                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mb-4">
                      {post.data.tags.map((postTag: string) => (
                        <a 
                          href={`${import.meta.env.BASE_URL}/${lang}/tags/${postTag}`} 
                          class={`px-3 py-1 rounded-full text-sm transition-colors ${
                            postTag === tag 
                              ? 'bg-[var(--color-accent)] text-white' 
                              : 'bg-[var(--color-border)] hover:bg-[var(--color-accent)] hover:text-white'
                          }`}
                        >
                          #{postTag}
                        </a>
                      ))}
                    </div>
                  )}
                </div>
                
                <div class="flex justify-between items-center mt-auto">
                  <span class="text-sm text-[var(--color-muted)] flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    {post.data.author || t('common.unknown_author')}
                  </span>
                  <a href={`${import.meta.env.BASE_URL}/${lang}/blog/${postSlug}`} class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline transition-all group">
                    {t('tags.read_more')}
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </article>
        );
      })}
    </div>

    <div class="mt-12 text-center">
      <a href={`${import.meta.env.BASE_URL}/${lang}/tags`} class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
        </svg>
        {t('tags.view_all_tags')}
      </a>
    </div>
  </div>
</Layout> 