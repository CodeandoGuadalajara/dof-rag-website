---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Obtener todos los posts del blog
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft;
});

// Extraer todas las etiquetas y contar las ocurrencias
const tagCounts = allPosts.reduce((acc, post) => {
  if (!post.data.tags) return acc;
  
  // Filter out empty strings and null/undefined values
  const validTags = post.data.tags.filter(tag => tag && tag.trim().length > 0);
  
  validTags.forEach((tag: string) => {
    if (!acc[tag]) {
      acc[tag] = 0;
    }
    acc[tag]++;
  });
  
  return acc;
}, {} as Record<string, number>);

// Ordenar las etiquetas por cantidad de posts (de mayor a menor)
const sortedTags = Object.entries(tagCounts)
  .sort(([, countA], [, countB]) => countB - countA)
  .map(([tag, count]) => ({ tag, count }));

// Función para obtener el tamaño relativo de la etiqueta según su frecuencia
function getTagSize(count: number, maxCount: number): string {
  if (!maxCount) return 'text-base';
  
  const ratio = count / maxCount;
  if (ratio > 0.8) return 'text-2xl font-bold';
  if (ratio > 0.6) return 'text-xl font-semibold';
  if (ratio > 0.4) return 'text-lg';
  if (ratio > 0.2) return 'text-base';
  return 'text-sm';
}

// Obtener el recuento máximo para calcular tamaños relativos
const maxCount = sortedTags.length > 0 ? sortedTags[0].count : 0;
---

<Layout title="Etiquetas | DOF-RAG Blog">
  <div class="container mx-auto px-4 py-12">
    <header class="mb-12 text-center">
      <h1 class="text-4xl font-bold mb-4">
        <span class="gradient-text">Todas las etiquetas</span>
      </h1>
      <p class="text-lg text-[var(--color-muted)]">
        Explora nuestro contenido por temas
      </p>
    </header>

    <div class="max-w-4xl mx-auto">
      {sortedTags.length > 0 ? (
        <div class="bg-[var(--color-card)] rounded-xl border border-[var(--color-border)] p-8">
          <div class="flex flex-wrap justify-center gap-4">
            {sortedTags.map(({ tag, count }) => (
              <a 
                href={`${import.meta.env.BASE_URL}tags/${tag}/`}
                class={`${getTagSize(count, maxCount)} px-4 py-2 rounded-full bg-[var(--color-border)] hover:bg-[var(--color-accent)] hover:text-white transition-colors relative group`}
              >
                <span class="relative z-10">#{tag}</span>
                <span class="opacity-0 group-hover:opacity-100 absolute -top-2 -right-2 bg-[var(--color-accent)] text-white text-xs px-2 py-1 rounded-full transition-opacity">
                  {count} {count === 1 ? 'post' : 'posts'}
                </span>
              </a>
            ))}
          </div>
        </div>
      ) : (
        <div class="text-center py-12">
          <p class="text-[var(--color-muted)] text-lg">No hay etiquetas disponibles todavía.</p>
        </div>
      )}
    </div>

    <div class="mt-12 text-center">
      <a href={import.meta.env.BASE_URL || '/'} class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Volver a la página principal
      </a>
    </div>
  </div>
</Layout>

<style>
  /* Animación suave al hover para las etiquetas */
  a {
    transition: all 0.2s ease-in-out;
  }
  
  a:hover {
    transform: translateY(-2px);
  }
</style> 