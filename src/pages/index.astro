---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Obtener todos los posts del blog usando Content Collections
const allBlogPosts = await getCollection('blog', ({ data }: { data: { draft?: boolean } }) => {
  return !data.draft;
});

// Función para formatear la fecha de manera segura
function formatDate(dateObj: Date): string {
  try {
    return dateObj.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (error) {
    console.error(`Error al formatear la fecha:`, error);
    return "Fecha no disponible";
  }
}

// Ordenar posts por fecha, del más reciente al más antiguo
const sortedPosts = [...allBlogPosts].sort((a, b) => {
  return b.data.date.getTime() - a.data.date.getTime();
});

// Limitar la cantidad inicial de posts a mostrar
const POSTS_PER_PAGE = 6;
const initialPosts = sortedPosts.slice(0, POSTS_PER_PAGE);
const hasMorePosts = sortedPosts.length > POSTS_PER_PAGE;

// Obtener posts destacados si existen
const featuredPosts = sortedPosts.filter(post => post.data.featured);
// Si no hay posts destacados, usar los más recientes
const popularPosts = featuredPosts.length > 0 ? featuredPosts : sortedPosts.slice(0, 3);
// Add title letters for blur effect
const titleText = "DOF-RAG";
const titleLetters = Array.from(titleText);

// Add subtitle words for blur effect (slightly faster)
const subtitleText = "Seguimiento y documentación de avances en el desarrollo de sistemas de recuperación y generación aumentada para el Diario Oficial de la Federación.";
const subtitleWords = subtitleText.split(" ");

// Serializar los posts para el script del cliente
const serializedPosts = JSON.stringify(
  sortedPosts.map(post => ({
    slug: post.slug,
    title: post.data.title,
    date: post.data.date.toISOString(),
    description: post.data.description || 'Sin descripción disponible',
    image: post.data.image ? post.data.image.toString() : null,
    author: post.data.author || 'Autor desconocido'
  }))
);
---

<Layout title="DOF-RAG Blog - Inicio">
  <section class="text-center py-16 md:py-24">
    <h1 class="text-5xl md:text-7xl font-bold mb-6">
      {titleLetters.map((letter, index) => (
        <span class="gradient-text title-letter" style={`--delay: ${index * 0.1}s`}>
          {letter}
        </span>
      ))}
    </h1>
    <p class="text-xl md:text-2xl max-w-3xl mx-auto text-[var(--color-muted)]">
      {subtitleWords.map((word, index) => (
        <span class="subtitle-word" style={`--delay: ${index * 0.05}s`}>
          {word}
        </span>
      ))}
    </p>
  </section>

  <div class="grid grid-cols-12 gap-8">
    <!-- Sidebar con posts populares -->
    <div class="col-span-12 md:col-span-3">
      <div class="sticky top-24">
        <h2 class="text-xl font-bold mb-6 pb-2 border-b border-[var(--color-border)]">Posts populares</h2>
        <ul class="space-y-4">
          {popularPosts.map(post => (
            <li>
              <a href={`${import.meta.env.BASE_URL}blog/${post.slug}/`} class="hover:text-[var(--color-accent)]">{post.data.title}</a>
            </li>
          ))}
        </ul>

        <div class="mt-12">
          <h2 class="text-xl font-bold mb-4 pb-2 border-b border-[var(--color-border)]">Suscríbete</h2>
          <p class="text-[var(--color-muted)] mb-4">Mantente al día con las novedades del proyecto</p>
          <a href={`${import.meta.env.BASE_URL}/rss.xml`} class="inline-block gradient-border px-4 py-2 text-sm font-medium rounded-md hover:opacity-90 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
              <path d="M6.503 20.752c0 1.794-1.456 3.248-3.251 3.248-1.796 0-3.252-1.454-3.252-3.248 0-1.794 1.456-3.248 3.252-3.248 1.795.001 3.251 1.454 3.251 3.248zm-6.503-12.572v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817c-.062-8.71-7.118-15.758-15.839-15.82zm0-3.368c10.58.046 19.152 8.594 19.183 19.188h4.817c-.03-13.231-10.755-23.954-24-24v4.812z"/>
            </svg>
            <span class="gradient-text">RSS</span>
          </a>
        </div>
      </div>
    </div>

    <!-- Main content -->
    <div class="col-span-12 md:col-span-9">
      <h2 class="text-3xl font-bold mb-8">
        <span class="gradient-text">Publicaciones recientes</span>
      </h2>
      
      <div id="posts-container" class="space-y-12">
        {initialPosts.map(post => (
          <article class="blog-card bg-[var(--color-card)] rounded-xl overflow-hidden transition-transform hover:scale-[1.01] hover:shadow-md border border-[var(--color-border)]">
            <div class="flex flex-col md:flex-row">
              {post.data.image ? (
                <div class="md:w-1/3 relative">
                  <a href={`${import.meta.env.BASE_URL}blog/${post.slug}/`} class="block w-full h-full overflow-hidden">
                    <img
                      src={`${import.meta.env.BASE_URL}${(post.data.image || '').startsWith('/') ? (post.data.image || '').substring(1) : (post.data.image || '')}`}
                      alt={`Imagen para ${post.data.title}`}
                      class="w-full h-48 md:h-full object-cover transition-transform hover:scale-[1.05]"
                      width="800"
                      height="450"
                      loading="lazy"
                      decoding="async"
                    />
                    <div class="absolute inset-0 bg-gradient-to-r from-black/30 to-transparent opacity-0 hover:opacity-100 transition-opacity"></div>
                  </a>
                </div>
              ) : null}
              
              <div class={`p-6 flex flex-col justify-between ${post.data.image ? 'md:w-2/3' : 'w-full'}`}>
                <div>
                  <time datetime={post.data.date.toISOString()} class="text-sm text-[var(--color-muted)] block mb-3">
                    {formatDate(post.data.date)}
                  </time>
                  <h3 class="text-2xl font-bold mb-3 line-clamp-2">
                    <a href={`${import.meta.env.BASE_URL}blog/${post.slug}/`} class="hover:text-[var(--color-accent)] transition-colors">
                      {post.data.title}
                    </a>
                  </h3>
                  <p class="text-[var(--color-muted)] mb-4 line-clamp-3">{post.data.description || 'Sin descripción disponible'}</p>
                </div>
                
                <div class="flex justify-between items-center mt-auto">
                  <span class="text-sm text-[var(--color-muted)] flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    {post.data.author || 'Autor desconocido'}
                  </span>
                  <a href={`${import.meta.env.BASE_URL}blog/${post.slug}/`} class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline transition-all group">
                    Leer más
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </article>
        ))}
      </div>
      
      {hasMorePosts && (
        <div class="flex justify-center mt-12">
          <button 
            id="load-more-btn"
            class="px-6 py-3 rounded-md bg-[var(--color-card)] border border-[var(--color-border)] hover:border-[var(--color-accent)] transition-colors flex items-center space-x-2"
            data-current-page="1"
          >
            <span>Cargar más</span>
            <svg id="loading-icon" class="h-5 w-5 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </div>
      )}
    </div>
  </div>

  <script define:vars={{ serializedPosts, POSTS_PER_PAGE }}>
    document.addEventListener('DOMContentLoaded', () => {
      const loadMoreBtn = document.getElementById('load-more-btn');
      const postsContainer = document.getElementById('posts-container');
      const loadingIcon = document.getElementById('loading-icon');
      const allPosts = JSON.parse(serializedPosts);
      
      if (!loadMoreBtn || !postsContainer) return;
      
      // Configuración
      const useLocalPosts = true; // Cambiar a false para usar la API en lugar de los posts locales
      
      /* // COMENTADO TEMPORALMENTE PARA EVITAR ERROR DE SINTAXIS
      loadMoreBtn.addEventListener('click', async () => {
        // Mostrar icono de carga
        loadingBtn(true);
        
        // Obtener página actual
        const currentPage = parseInt(loadMoreBtn.dataset.currentPage, 10);
        const nextPage = currentPage + 1;
        const startIndex = currentPage * POSTS_PER_PAGE;
        const endIndex = nextPage * POSTS_PER_PAGE;
        
        try {
          // Esperar un poco para mostrar la animación de carga (solo para demostración)
          await new Promise(resolve => setTimeout(resolve, 500));
          
          let nextPosts = [];
          
          if (useLocalPosts) {
            // Método 1: Usar los posts ya cargados en el cliente
            nextPosts = allPosts.slice(startIndex, endIndex);
          } else {
            // Método 2: Obtener posts a través de la API
            const response = await fetch(`/api/more-posts.json?offset=${startIndex}&limit=${POSTS_PER_PAGE}`);
            if (!response.ok) throw new Error('Error al cargar posts');
            const data = await response.json();
            nextPosts = data.posts;
            
            // Verificar si hay más posts según la API
            if (!data.hasMore) {
              loadMoreBtn.parentElement.classList.add('hidden');
            }
          }
          
          if (nextPosts.length > 0) {
            // Renderizar nuevos posts
            // --- INICIO SECCIÓN PROBLEMÁTICA COMENTADA ---
            // for (const post of nextPosts) {
            //   const postHTML = createPostHTML(post);
            //   postsContainer.insertAdjacentHTML('beforeend', postHTML);
            // }
            // --- FIN SECCIÓN PROBLEMÁTICA COMENTADA ---
            
            // Actualizar página actual
            loadMoreBtn.dataset.currentPage = nextPage.toString();
            
            // Si usamos posts locales, verificar si quedan más
            if (useLocalPosts && endIndex >= allPosts.length) {
              loadMoreBtn.parentElement.classList.add('hidden');
            }
          } else {
            // No hay más posts, ocultar botón
            loadMoreBtn.parentElement.classList.add('hidden');
          }
        } catch (error) {
          console.error('Error:', error);
          // Mostrar mensaje de error
          const errorMsg = document.createElement('div');
          errorMsg.className = 'text-red-500 text-center mt-4';
          errorMsg.textContent = 'Error al cargar más posts. Inténtalo de nuevo.';
          loadMoreBtn.parentElement.insertAdjacentElement('beforebegin', errorMsg);
          
          // Auto-eliminar mensaje después de 5 segundos
          setTimeout(() => errorMsg.remove(), 5000);
        } finally {
          // Dejar de mostrar icono de carga
          loadingBtn(false);
        }
      });
      */ // FIN COMENTADO TEMPORALMENTE
      
      // Función para mostrar/ocultar el icono de carga en el botón
      function loadingBtn(isLoading) {
        const btnSpan = loadMoreBtn.querySelector('span');
        if (isLoading) {
          if (btnSpan) btnSpan.classList.add('hidden');
          if (loadingIcon) loadingIcon.classList.remove('hidden');
          loadMoreBtn.disabled = true;
        } else {
          if (btnSpan) btnSpan.classList.remove('hidden');
          if (loadingIcon) loadingIcon.classList.add('hidden');
          loadMoreBtn.disabled = false;
        }
      }
      
      // Función para formatear fecha (igual que en Astro frontmatter)
      function formatDate(dateString) {
        try {
          const date = new Date(dateString);
          return date.toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
        } catch (error) {
          return "Fecha no disponible";
        }
      }
      
      // Función para crear el HTML de un post
      function createPostHTML(post) {
        // Construir la URL de la imagen correctamente con BASE_URL
        const imageUrl = post.image ? `${import.meta.env.BASE_URL}${(post.image || '').startsWith('/') ? (post.image || '').substring(1) : (post.image || '')}` : null;
        
        return `
          <article class="blog-card bg-[var(--color-card)] rounded-xl overflow-hidden transition-transform hover:scale-[1.01] hover:shadow-md border border-[var(--color-border)]">
            <div class="flex flex-col md:flex-row">
              ${post.image ? `
                <div class="md:w-1/3 relative">
                  <a href="${import.meta.env.BASE_URL}blog/${post.slug}/" class="block w-full h-full overflow-hidden">
                    <img 
                      src="${imageUrl}" 
                      alt="Imagen para ${post.title}"
                      class="w-full h-48 md:h-full object-cover transition-transform hover:scale-[1.05]"
                      width="800"
                      height="450"
                      loading="lazy"
                      decoding="async"
                    />
                    <div class="absolute inset-0 bg-gradient-to-r from-black/30 to-transparent opacity-0 hover:opacity-100 transition-opacity"></div>
                  </a>
                </div>
              ` : ''}
              
              <div class="${post.image ? 'md:w-2/3' : 'w-full'} p-6 flex flex-col justify-between">
                <div>
                  <time datetime="${post.date}" class="text-sm text-[var(--color-muted)] block mb-3">
                    ${formatDate(post.date)}
                  </time>
                  <h3 class="text-2xl font-bold mb-3 line-clamp-2">
                    <a href="${import.meta.env.BASE_URL}blog/${post.slug}/" class="hover:text-[var(--color-accent)] transition-colors">
                      ${post.title}
                    </a>
                  </h3>
                  <p class="text-[var(--color-muted)] mb-4 line-clamp-3">${post.description}</p>
                </div>
                
                <div class="flex justify-between items-center mt-auto">
                  <span class="text-sm text-[var(--color-muted)] flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    ${post.author}
                  </span>
                  <a href="${import.meta.env.BASE_URL}blog/${post.slug}/" class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline transition-all group">
                    Leer más
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </article>
        `;
      }
    });
  </script>
</Layout>