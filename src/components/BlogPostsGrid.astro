---
import { getLangFromUrl } from '../i18n/utils.ts';
import type { CollectionEntry } from 'astro:content';
import type { SupportedLanguage } from '../i18n/config';

export interface Props {
  posts: CollectionEntry<'blog'>[];
  lang: SupportedLanguage;
  baseUrl: string;
  translations: {
    readMore: string;
    loadMore: string;
    noMorePosts: string;
    unknownAuthor: string;
    noDescription: string;
  };
}

const { posts, lang, baseUrl, translations } = Astro.props;

// Constante para posts por página
const POSTS_PER_PAGE = 5;

// Ordenar posts por fecha (más recientes primero)
const sortedPosts = posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Posts recientes para mostrar inicialmente
const initialPosts = sortedPosts.slice(0, POSTS_PER_PAGE);

// Función para preparar el slug (remover prefijo de idioma si existe)
function prepareSlug(slug: string): string {
  if (slug.startsWith('en/') || slug.startsWith('es/')) {
    return slug.substring(3); // Eliminar el prefijo de idioma
  }
  return slug;
}

// Serializar posts para uso en el cliente
const serializedPosts = sortedPosts.map(post => ({
  slug: prepareSlug(post.slug),
  title: post.data.title,
  description: post.data.description,
  date: post.data.date.toISOString(),
  image: post.data.image,
  author: post.data.author,
}));

// Función para formatear la fecha de manera segura
function formatDate(dateObj: Date): string {
  try {
    return dateObj.toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (error) {
    console.error(`Error al formatear la fecha:`, error);
    return lang === 'es' ? 'Fecha no disponible' : 'Date not available';
  }
}
---

<div id="posts-container" class="space-y-12">
  {initialPosts.map(post => (
    <article class="blog-card bg-[var(--color-card)] rounded-xl overflow-hidden transition-transform hover:scale-[1.01] hover:shadow-md border border-[var(--color-border)]">
      <div class="flex flex-col md:flex-row">
        {post.data.image ? (
          <div class="md:w-1/3 relative">
            <a href={`${baseUrl}/${lang}/blog/${prepareSlug(post.slug)}`} class="block w-full h-full overflow-hidden">
              <img
                src={`${baseUrl}/${(post.data.image || '').startsWith('/') ? (post.data.image || '').substring(1) : (post.data.image || '')}`}
                alt={`Imagen para ${post.data.title}`}
                class="w-full h-48 md:h-full object-cover transition-transform hover:scale-[1.05]"
                width="800"
                height="450"
                loading="lazy"
                decoding="async"
              />
              <div class="absolute inset-0 bg-gradient-to-r from-black/30 to-transparent opacity-0 hover:opacity-100 transition-opacity"></div>
            </a>
          </div>
        ) : null}
        
        <div class={`p-6 flex flex-col justify-between ${post.data.image ? 'md:w-2/3' : 'w-full'}`}>
          <div>
            <time datetime={typeof post.data.date === 'string' ? post.data.date : post.data.date.toISOString()} class="text-sm text-[var(--color-muted)] block mb-3">
              {formatDate(new Date(post.data.date))}
            </time>
            <h3 class="text-2xl font-bold mb-3 line-clamp-2">
              <a href={`${baseUrl}/${lang}/blog/${prepareSlug(post.slug)}`} class="hover:text-[var(--color-accent)] transition-colors">
                {post.data.title}
              </a>
            </h3>
            <p class="text-[var(--color-muted)] mb-4 line-clamp-3">{post.data.description || translations.noDescription}</p>
          </div>
          
          <div class="flex justify-between items-center mt-auto">
            <span class="text-sm text-[var(--color-muted)] flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              {post.data.author || translations.unknownAuthor}
            </span>
            <a href={`${baseUrl}/${lang}/blog/${prepareSlug(post.slug)}`} class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline transition-all group">
              {translations.readMore}
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </article>
  ))}
</div>

{sortedPosts.length > POSTS_PER_PAGE && (
  <div class="flex justify-center mt-12">
    <button 
      id="load-more-btn"
      class="px-6 py-3 rounded-md bg-[var(--color-card)] border border-[var(--color-border)] hover:border-[var(--color-accent)] transition-colors flex items-center space-x-2"
      data-current-page="1"
    >
      <span>{translations.loadMore}</span>
      <svg id="loading-icon" class="h-5 w-5 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </button>
  </div>
)}

<div id="no-more-posts" class="text-center mt-12 text-[var(--color-muted)] hidden">
  {translations.noMorePosts}
</div>

<script define:vars={{ 
  serializedPosts: serializedPosts, 
  initialPosts: initialPosts.length,
  lang: lang,
  baseUrl: baseUrl,
  postsPerPage: POSTS_PER_PAGE,
  translations: translations
}}>
  // Convertir los posts serializados en objetos
  const allPosts = serializedPosts;
  let currentPostsCount = initialPosts;
  const postsContainer = document.getElementById('posts-container');
  const loadMoreButton = document.getElementById('load-more-btn');
  const loadingIndicator = document.getElementById('loading-icon');
  const noMorePostsMessage = document.getElementById('no-more-posts');
  
  // Usar el valor pasado desde el contexto de Astro
  const POSTS_PER_PAGE = postsPerPage;
  
  function formatDate(dateStr) {
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString(
        lang === 'es' ? 'es-ES' : 'en-US', 
        {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }
      );
    } catch (error) {
      console.error('Error al formatear fecha:', error);
      return lang === 'es' ? 'Fecha no disponible' : 'Date not available';
    }
  }

  // Función para crear el HTML de un post
  function createPostHTML(post) {
    // Construir la URL de la imagen correctamente con BASE_URL
    const imageUrl = post.image ? `${baseUrl}/${(post.image || '').startsWith('/') ? (post.image || '').substring(1) : (post.image || '')}` : null;
    
    return `
      <article class="blog-card bg-[var(--color-card)] rounded-xl overflow-hidden transition-transform hover:scale-[1.01] hover:shadow-md border border-[var(--color-border)]">
        <div class="flex flex-col md:flex-row">
          ${post.image ? `
            <div class="md:w-1/3 relative">
              <a href="${baseUrl}/${lang}/blog/${post.slug}" class="block w-full h-full overflow-hidden">
                <img 
                  src="${imageUrl}" 
                  alt="Imagen para ${post.title}"
                  class="w-full h-48 md:h-full object-cover transition-transform hover:scale-[1.05]"
                  width="800"
                  height="450"
                  loading="lazy"
                  decoding="async"
                />
                <div class="absolute inset-0 bg-gradient-to-r from-black/30 to-transparent opacity-0 hover:opacity-100 transition-opacity"></div>
              </a>
            </div>
          ` : ''}
          
          <div class="${post.image ? 'md:w-2/3' : 'w-full'} p-6 flex flex-col justify-between">
            <div>
              <time datetime="${post.date}" class="text-sm text-[var(--color-muted)] block mb-3">
                ${formatDate(post.date)}
              </time>
              <h3 class="text-2xl font-bold mb-3 line-clamp-2">
                <a href="${baseUrl}/${lang}/blog/${post.slug}" class="hover:text-[var(--color-accent)] transition-colors">
                  ${post.title}
                </a>
              </h3>
              <p class="text-[var(--color-muted)] mb-4 line-clamp-3">${post.description || translations.noDescription}</p>
            </div>
            
            <div class="flex justify-between items-center mt-auto">
              <span class="text-sm text-[var(--color-muted)] flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                ${post.author || translations.unknownAuthor}
              </span>
              <a href="${baseUrl}/${lang}/blog/${post.slug}" class="inline-flex items-center text-[var(--color-accent)] font-medium hover:underline transition-all group">
                ${translations.readMore}
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </a>
            </div>
          </div>
        </div>
      </article>
    `;
  }
  
  // Evento para cargar más posts
  loadMoreButton?.addEventListener('click', async () => {
    // Mostrar indicador de carga y ocultar botón
    loadingIndicator.classList.remove('hidden');
    loadMoreButton.classList.add('hidden');
    
    // Simular carga con pequeño retraso
    setTimeout(() => {
      // Calcular qué posts mostrar
      const nextPosts = allPosts.slice(currentPostsCount, currentPostsCount + POSTS_PER_PAGE);
      
      if (nextPosts.length > 0) {
        // Añadir nuevos posts al contenedor
        nextPosts.forEach(post => {
          const postElement = document.createElement('div');
          postElement.innerHTML = createPostHTML(post);
          postsContainer.appendChild(postElement.firstElementChild);
        });
        
        // Actualizar contador
        currentPostsCount += nextPosts.length;
        
        // Comprobar si hay más posts para cargar
        if (currentPostsCount >= allPosts.length) {
          noMorePostsMessage.classList.remove('hidden');
        } else {
          loadMoreButton.classList.remove('hidden');
        }
      } else {
        noMorePostsMessage.classList.remove('hidden');
      }
      
      // Ocultar indicador de carga
      loadingIndicator.classList.add('hidden');
    }, 600);
  });
</script> 